version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: gametracker
      POSTGRES_USER: gametracker
      POSTGRES_PASSWORD: gametracker_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gametracker"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Web Application
  web:
    build: .
    environment:
      - DATABASE_URL=postgresql://gametracker:gametracker_password@db:5432/gametracker
      - REDIS_URL=redis://redis:6379
      - FLASK_ENV=production
      - SECRET_KEY=your-production-secret-key
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: gunicorn --bind 0.0.0.0:8000 --workers 4 --timeout 120 run:app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://gametracker:gametracker_password@db:5432/gametracker
      - REDIS_URL=redis://redis:6379
      - FLASK_ENV=production
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A tasks.celery worker --loglevel=info --concurrency=2

  # Celery Beat for scheduled tasks
  beat:
    build: .
    environment:
      - DATABASE_URL=postgresql://gametracker:gametracker_password@db:5432/gametracker
      - REDIS_URL=redis://redis:6379
      - FLASK_ENV=production
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A tasks.celery beat --loglevel=info

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: gametracker_network